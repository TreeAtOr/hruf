/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.NewBoard;
import io.swagger.model.NewBoardResponse;
import io.swagger.model.UpdateBoard;
import io.swagger.model.UpdateBoardResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-01-02T14:20:23.582Z[GMT]")
@Validated
public interface BoardApi {

    @Operation(summary = "Add a new board", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "board" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Board created successfully", content = @Content(mediaType = "board/json", schema = @Schema(implementation = NewBoardResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized") })
    @RequestMapping(value = "/board",
        produces = { "board/json" }, 
        consumes = { "board/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<NewBoardResponse> addBoard(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody NewBoard body);


    @Operation(summary = "Update board", description = "Update board by unique board ID", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "board" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Update successful", content = @Content(mediaType = "board/json", schema = @Schema(implementation = UpdateBoardResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Update failed. Invalid board ID"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "404", description = "Update failed. Board not found.") })
    @RequestMapping(value = "/board",
        produces = { "board/json" }, 
        consumes = { "board/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UpdateBoardResponse> updateBoard(@Parameter(in = ParameterIn.DEFAULT, description = "desc", required=true, schema=@Schema()) @Valid @RequestBody UpdateBoard body);

}

